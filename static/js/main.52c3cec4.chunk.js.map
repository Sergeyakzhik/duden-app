{"version":3,"sources":["main/Card.js","main/Home.js","api/duden.js","main/HomeContainer.js","App.js","serviceWorker.js","index.js"],"names":["WordCard","item","ind","wordsData","expandedWords","onWordClick","useState","cardHeight","setCardHeight","card","useRef","useEffect","current","offsetHeight","Card","className","onClick","style","height","includes","console","log","title","id","ref","meanings","map","i","key","Home","wordsList","onInputChange","Container","Form","Control","onChange","type","placeholder","value","fetch","word","result","replace","HomeContainer","setValue","setWordsList","setWordsData","setExpandedWords","length","a","Duden","response","json","slice","split","reverse","Promise","all","responseArr","text","resultArr","documents","$","titles","find","el","innerText","target","arr","splice","indexOf","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.52c3cec4.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst WordCard = ({ item, ind, wordsData, expandedWords, onWordClick }) => {\r\n    const [cardHeight, setCardHeight] = useState(0);\r\n    const card = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setCardHeight(card.current.offsetHeight);\r\n    }, [wordsData]);\r\n\r\n    return (\r\n        <Card className=\"word-card\" onClick={() => onWordClick(ind)} style={{ height: expandedWords.includes(ind) ? `${cardHeight + 68}px` : '58px' }}>\r\n            {console.log(cardHeight)}\r\n            <p className=\"title\">{wordsData[ind] && wordsData[ind].title || item}</p>\r\n            <div id={'meaning' + ind} ref={card} className=\"meanings\">\r\n                {wordsData[ind] && wordsData[ind].meanings.map((ind, i) => <p className=\"meaning\" key={i}>{i}</p>)}\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default WordCard;\r\n","import React from 'react';\r\nimport { Container, Form } from 'react-bootstrap';\r\n\r\nimport Card from './Card';\r\n\r\nimport './home.scss';\r\n\r\nconst Home = ({ wordsList, wordsData, expandedWords, onInputChange, onWordClick }) => {\r\n    return (\r\n        <Container className=\"main-container\">\r\n            <div className=\"words-list\">\r\n                {wordsList.map((item, ind) => (\r\n                    <Card key={ind} ind={ind} item={item} wordsData={wordsData} expandedWords={expandedWords} onWordClick={onWordClick} />\r\n                ))}\r\n            </div>\r\n            <div className=\"input-wrapper\">\r\n                <Form.Control onChange={onInputChange} type=\"text\" placeholder=\"Fügen Sie das Wort ein\" />\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import fetch from 'cross-fetch';\r\n\r\nexport default {\r\n    getAutocompleteList: value => {\r\n        const URL = 'https://cors-anywhere.herokuapp.com/https://www.duden.de/search_api_autocomplete/dictionary_search?filter=search_api_fulltext&q=';\r\n        \r\n        return fetch(URL + value);\r\n    },\r\n\r\n    getWordPage: word => {\r\n        const URL = 'https://cors-anywhere.herokuapp.com/https://www.duden.de/rechtschreibung/';\r\n        const result = word.replace('ö', 'oe').replace('ä', 'ae').replace('ü', 'ue').replace('ß', 'sz');\r\n        \r\n        return fetch(URL + result);\r\n    }\r\n};","import React, { useState, useEffect } from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport Home from './Home';\r\nimport Duden from '../api';\r\n\r\nconst HomeContainer = () => {\r\n    const [value, setValue] = useState('');\r\n    const [wordsList, setWordsList] = useState([]);\r\n    const [wordsData, setWordsData] = useState([]);\r\n    const [expandedWords, setExpandedWords] = useState([]);\r\n\r\n    //create object to store [title]: of words from autocomplete and don't load their info if there's no need in it\r\n\r\n    useEffect(() => {\r\n        if (value.length > 3) {\r\n            (async () => {\r\n                const response = await Duden.getAutocompleteList(value);\r\n                const result = await response.json();\r\n\r\n                setWordsList(result.slice(0, 5).map(item => item.value.split('/').reverse()[0]));\r\n            })();\r\n        }\r\n    }, [value]);\r\n\r\n    useEffect(() => {\r\n        if (wordsList.length) {\r\n            (async () => {\r\n                const responseArr = await Promise.all(wordsList.map(item => Duden.getWordPage(item)));\r\n                const resultArr = await Promise.all(responseArr.map(item => item.text()));\r\n                const documents = resultArr.map(item => $(item));\r\n                const titles = documents.map(item => item.find('.lemma__title').text());\r\n                let meanings = documents.map(item => item.find('#bedeutungen .enumeration__text').length ? item.find('#bedeutungen .enumeration__text') : item.find('#bedeutung p'));\r\n\r\n                meanings = meanings.map(item => item.map((i, el) => el.innerText));\r\n\r\n                setWordsData(wordsList.map((item, ind) => ({ title: titles[ind], meanings: meanings[ind] })));\r\n            })();\r\n        }\r\n    }, [wordsList]);\r\n\r\n    const handleInputChange = ({ target: { value } }) => {\r\n        setValue(value);\r\n        setExpandedWords([]);\r\n    };\r\n\r\n    const handleWordClick = ind => {\r\n        if (expandedWords.includes(ind)) {\r\n            const arr = [ ...expandedWords ];\r\n\r\n            arr.splice(expandedWords.indexOf(ind), 1);\r\n\r\n            setExpandedWords(arr);\r\n        } else {\r\n            setExpandedWords([ ...expandedWords, ind ]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Home wordsList={wordsList} wordsData={wordsData} expandedWords={expandedWords} onInputChange={handleInputChange} onWordClick={handleWordClick} />\r\n    );\r\n};\r\n\r\nexport default HomeContainer;\r\n","import React from 'react';\n\nimport Home from './main';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n    return (\n        <Home />\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}